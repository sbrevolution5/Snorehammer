@using Snorehammer.Web.Components.Simulation
@using Snorehammer.Web.Components.Simulation.DiceRoller
@using Snorehammer.Web.FrontendModels
@using Snorehammer.Web.FrontendModels.Simulations
@using Snorehammer.Web.Services

<RadzenPanel AllowCollapse="true" class="rz-my-10 rz-mx-auto">
    <HeaderTemplate>
        <RadzenText TextStyle="TextStyle.H6" class="rz-display-flex rz-align-items-center rz-m-0">
            <RadzenIcon Icon="casino" class="rz-me-1" /><b>@Title</b>
        </RadzenText>
    </HeaderTemplate>
    <ChildContent>
        <RadzenRow>
            <RadzenColumn Size="6">
                <h3>
                    @RollString1
                </h3>
            </RadzenColumn>
            <RadzenColumn>
                <h3> @RollString2</h3>
            </RadzenColumn>
        </RadzenRow>
        <RadzenRow>
            @if (HasConstant)
            {
                var diceCopy = new List<Dice>(DiceList);
                for (int i = 0; i < DiceList.Count; i += DiceNum)
                {
                    //display the next x dice, where x is dice num, then the constant
                    var perRoll = diceCopy.Take(DiceNum);
                    foreach (var die in perRoll)
                    {
                        diceCopy.Remove(die);
                        <RadzenColumn>
                            <DieDisplay die=@die CriticalMatters=@CriticalMatters></DieDisplay>
                        </RadzenColumn>
                    }
                    <RadzenColumn>
                        <DieDisplay die=@ConstantDie></DieDisplay>
                    </RadzenColumn>
                }
            }
            else
            {

                @foreach (var die in DiceList)
                {
                    <RadzenColumn>
                        <DieDisplay die=@die CriticalMatters=@CriticalMatters></DieDisplay>
                    </RadzenColumn>
                }
            }
        </RadzenRow>
    </ChildContent>
    <SummaryTemplate>
        <RadzenCard class="rz-mt-4">
            <RadzenRow>
                <RadzenColumn Size="6">
                    <h3>
                        @RollString1
                    </h3>
                </RadzenColumn>
                <RadzenColumn>
                    <h3> @RollString2</h3>
                </RadzenColumn>
            </RadzenRow>
        </RadzenCard>
    </SummaryTemplate>
</RadzenPanel>
@code {
    [Parameter]
    public WeaponSimulation sim { get; set; }
    [Parameter]
    public string RollString1 { get; set; }
    [Parameter]
    public string RollString2 { get; set; }
    [Parameter]
    public string Title { get; set; }
    [Parameter]
    public List<Dice> DiceList { get; set; }
    [Parameter]
    public bool CriticalMatters { get; set; } = false;
    [Parameter]
    public bool HasConstant { get; set; } = false;
    [Parameter]
    public int DiceNum { get; set; } = 0;
    [Parameter]
    public int ConstantValue { get; set; } = 0;
    public Dice ConstantDie { get; set; }
    protected override Task OnInitializedAsync()
    {
        if (HasConstant)
        {
            ConstantDie = new Dice()
            {
                Result = ConstantValue
            };
        }
        return base.OnInitializedAsync();
    }
}