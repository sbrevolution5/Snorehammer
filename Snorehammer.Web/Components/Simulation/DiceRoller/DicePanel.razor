@using Snorehammer.Web.Components.Simulation
@using Snorehammer.Web.Components.Simulation.DiceRoller
@using Snorehammer.Web.FrontendModels
@using Snorehammer.Web.FrontendModels.Simulations
@using Snorehammer.Web.Services

<RadzenPanel AllowCollapse="true" class="rz-my-10 rz-mx-auto">
    <HeaderTemplate>
        <RadzenText TextStyle="TextStyle.H6" class="rz-display-flex rz-align-items-center rz-m-0">
            <RadzenIcon Icon="casino" class="rz-me-1" /><b>@Title</b>
        </RadzenText>
    </HeaderTemplate>
    <ChildContent>
        <RadzenRow>
            <RadzenColumn Size="6">
                <h3>
                    @RollString1
                </h3>
            </RadzenColumn>
            <RadzenColumn>
                <h3> @RollString2</h3>
            </RadzenColumn>
        </RadzenRow>
        <RadzenRow>
            @if (IsVariable)
            {
                <RadzenCardGroup Style="flex-wrap:wrap; justify-content:space-evenly" >

                    @for (int i = 0; i < VariableSetCount; i++)
                    {
                        //display the next x dice, where x is dice num, then the constant
                        var perRoll = DiceList.Skip(i * DiceNum).Take(DiceNum);
                        <RadzenCard class="rz-m-1 rz-shadow-4">
                            <RadzenRow Style="flex-wrap:nowrap">

                                @foreach (var die in perRoll)
                                {
                                        <DieDisplay die=@die CriticalMatters=@CriticalMatters></DieDisplay>
                                }
                                @if (HasConstant)
                                {
                                        <DieDisplay die=@ConstantDie></DieDisplay>
                                }
                            </RadzenRow>
                        </RadzenCard>
                    }
                </RadzenCardGroup>
            }
            else
            {

                @foreach (var die in DiceList)
                {
                    <RadzenColumn>
                        <DieDisplay die=@die CriticalMatters=@CriticalMatters></DieDisplay>
                    </RadzenColumn>
                }
            }
        </RadzenRow>
    </ChildContent>
    <SummaryTemplate>
        <RadzenCard class="rz-mt-4">
            <RadzenRow>
                <RadzenColumn Size="6">
                    <h3>
                        @RollString1
                    </h3>
                </RadzenColumn>
                <RadzenColumn>
                    <h3> @RollString2</h3>
                </RadzenColumn>
            </RadzenRow>
        </RadzenCard>
    </SummaryTemplate>
</RadzenPanel>
@code {
    [Parameter]
    public WeaponSimulation sim { get; set; }
    [Parameter]
    public string RollString1 { get; set; }
    [Parameter]
    public string RollString2 { get; set; }
    [Parameter]
    public string Title { get; set; }
    [Parameter]
    public List<Dice> DiceList { get; set; }
    [Parameter]
    public bool CriticalMatters { get; set; } = false;
    [Parameter]
    public bool HasConstant { get; set; }
    [Parameter]
    public int DiceNum { get; set; } = 0;
    [Parameter]
    public int ConstantValue { get; set; } = 0;
    [Parameter]
    public int VariableSetCount { get; set; } = 0;
    [Parameter]
    public bool IsVariable { get; set; } = false;
    public Dice ConstantDie { get; set; }
    protected override Task OnParametersSetAsync()
    {
        if (HasConstant)
        {
            ConstantDie = new Dice()
            {
                Result = ConstantValue,
                ConstantDisplay = true
            };
        }
        return base.OnParametersSetAsync();
    }
}