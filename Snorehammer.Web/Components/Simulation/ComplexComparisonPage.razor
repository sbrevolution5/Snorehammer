@page "/"
@using Snorehammer.Web.Components.Simulation.Results
@using Snorehammer.Web.Components.Simulation.Results.Graphs
@using Snorehammer.Web.Components.Simulation.Results.Grid
@using Snorehammer.Web.Components.Unit
@using Snorehammer.Web.FrontendModels
@using Snorehammer.Web.FrontendModels.Profiles
@using Snorehammer.Web.FrontendModels.Simulations
@using Snorehammer.Web.Services
@rendermode InteractiveServer
<RadzenCard>
    <RadzenText TextStyle="TextStyle.H3">
        Don't know warhammer?  No Problem!
    </RadzenText>
    <RadzenText TextStyle="TextStyle.Body1"> Scroll down to the fight button to try it out.  The form is already filled in with a simulation.</RadzenText>
    <RadzenText TextStyle="TextStyle.Body2"> Or try one of these predefined scenarios:</RadzenText>
    <RadzenRow>
        <RadzenButton Click="@(() => SetupDemo1())" Text="Termagants (bug infantry) vs. Intercessors (Light infantry)" ButtonStyle="ButtonStyle.Primary"></RadzenButton>
        <RadzenButton Click="@(() => SetupDemo2())" Text="Chaos Land Raider (tank) vs. Terminators (Heavy infantry)" ButtonStyle="ButtonStyle.Primary"></RadzenButton>
        <RadzenButton Click="@(() => SetupDemo3())" Text="Comparison of Space marines or blood claws (light infantry) vs. Genestealers (Melee bugs)" ButtonStyle="ButtonStyle.Primary"></RadzenButton>
    </RadzenRow>
</RadzenCard>
<h3>ComplexComparison</h3>

<RadzenStack class="rz-p-sm-12" Orientation="Orientation.Horizontal">
    <RadzenSwitch Disabled=@comparison.ComparingDefenders @bind-Value=@comparison.ComparingAttackers />
    <RadzenLabel>Compare Attackers</RadzenLabel>
    <RadzenSwitch Disabled=@comparison.ComparingAttackers @bind-Value=@comparison.ComparingDefenders />
    <RadzenLabel>Compare Defenders</RadzenLabel>
    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
        <EditForm Model="SelectedNumberOfSimulations">

            <RadzenSelectBar TValue="int" Size="ButtonSize.Small" @bind-Value="SelectedNumberOfSimulations" Change="x => AssignMultiSims(x)">
                <Items>
                    <RadzenSelectBarItem Value="1" Text="x1" />
                    <RadzenSelectBarItem Value="5" Text="x5" />
                    <RadzenSelectBarItem Value="10" Text="x10" />
                    <RadzenSelectBarItem Value="100" Text="x100" />
                    <RadzenSelectBarItem Value="1000" Text="x1000" />
                </Items>
            </RadzenSelectBar>
        </EditForm>
    </RadzenStack>
</RadzenStack>

<RadzenCard Variant="Variant.Text">

    <h1>Attacker</h1>
    <RadzenCardGroup>
        @if (comparison.ComparingAttackers)
        {
            <RadzenCard Variant="Variant.Text">
                <UnitInput @bind-Unit="comparison.Simulation1.Attacker" Attacker=true />

                <RadzenButton Click=@(() => SetAttacker(comparison.AlternateAttackSimulation.Attacker.Attacks[0], comparison.Simulation1)) ButtonStyle="ButtonStyle.Primary"><RadzenIcon Icon="content_copy" /><span> Copy from Attacker 2 </span></RadzenButton>
            </RadzenCard>
            <RadzenCard Variant="Variant.Text">

                <UnitInput @bind-Unit="comparison.AlternateAttackSimulation.Attacker" Attacker=true />
                <RadzenButton Click=@(() => SetAttacker(comparison.Simulation1.Attacker.Attacks[0], comparison.AlternateAttackSimulation)) ButtonStyle="ButtonStyle.Primary"><RadzenIcon Icon="content_copy" /><span> Copy from Attacker 1 </span></RadzenButton>
            </RadzenCard>
        }
        else
        {
            <RadzenCard Variant="Variant.Text">

                <UnitInput @bind-Unit="comparison.Simulation1.Attacker" Attacker=true />
            </RadzenCard>
        }
    </RadzenCardGroup>
    <h1>Defender</h1>
    <RadzenCardGroup>
        @if (comparison.ComparingDefenders)
        {
            <RadzenCard Variant="Variant.Text">
                <UnitInput @bind-Unit="comparison.Simulation1.Defender" Attacker=false />
                <RadzenButton Click=@(() => SetDefender(comparison.AlternateDefenseSimulation.Defender, comparison.Simulation1)) ButtonStyle="ButtonStyle.Primary"><RadzenIcon Icon="content_copy" /><span> Copy from Defender 2 </span></RadzenButton>
            </RadzenCard>
            <RadzenCard Variant="Variant.Text">
                <UnitInput @bind-Unit="comparison.AlternateDefenseSimulation.Defender" Attacker=false />
                <RadzenButton Click=@(() => SetDefender(comparison.Simulation1.Defender, comparison.AlternateDefenseSimulation)) ButtonStyle="ButtonStyle.Primary"><RadzenIcon Icon="content_copy" /><span> Copy from Defender 1 </span></RadzenButton>
            </RadzenCard>
        }
        else
        {
            <RadzenCard Variant="Variant.Text">
                <UnitInput @bind-Unit="comparison.Simulation1.Defender" Attacker=false />
            </RadzenCard>
        }
    </RadzenCardGroup>
</RadzenCard>
<RadzenCardGroup>
    <FightResult sim="ViewSim1"></FightResult>
    @if (comparison.ComparingAttackers)
    {
        <FightResult sim="ViewSim2"></FightResult>
    }
    @if (comparison.ComparingDefenders)
    {
        <FightResult sim="ViewSim2"></FightResult>
    }
</RadzenCardGroup>
<RadzenButton Click=@(() => FightUnits()) Text="Fight all Units" ButtonStyle="ButtonStyle.Primary" />
@if (comparison.Simulation1.Stats.ColumnName != "")
{
    <DataGrid comparison="comparison"></DataGrid>
    <GraphsDisplay comparison="comparison"></GraphsDisplay>

}
@code {

    public Comparison comparison { get; set; }
    public bool ShowTable { get; set; } = true;
    private int SelectedNumberOfSimulations = 1;
    private FightSimulationService fightSimulationService = new FightSimulationService();
    private FightSimulation ViewSim1;
    private FightSimulation ViewSim2;
    private void SetAttacker(AttackProfile source, MultiFightSimulation destination)
    {
        destination.Attacker = (UnitProfile)source.Clone();
        destination.Attacker.Name = source.Name + "(1)";
        foreach (var attack in destination.Attacker.Attacks)
        {
            attack.Name = attack.Name + "(1)";
        }
    }
    private void SetDefender(UnitProfile source, MultiFightSimulation destination)
    {
        destination.Defender = (UnitProfile)source.Clone();
        destination.Defender.Name = source.Name + "(1)";
    }
    private void AssignMultiSims(int x)
    {
        SelectedNumberOfSimulations = x;
        comparison.Simulation1.SetSimNumber(x);
        comparison.AlternateDefenseSimulation.SetSimNumber(x);
        comparison.AlternateAttackSimulation.SetSimNumber(x);

    }
    public async Task SetupDemo1()
    {
        comparison = new Comparison();
        comparison.Simulation1 = new MultiFightSimulation()
        {

            Defender = new UnitProfile()
            {
                InvulnerableSave = 0,
                MinimumSave = 3,
                Toughness = 4,
                Wounds = 2,
                ModelCount = 10,
                Name = "Intercessors"
            },
            Attacker = new UnitProfile()
            {
                Attacks = new List<AttackProfile>()
                {
                    new AttackProfile()
                    {
                        Name = "Termagant spinefists",
                        WeaponsInUnit = 10,
                        ArmorPenetration = 0,
                        Attacks = 2,
                        Damage = 1,
                        Skill = 4,
                        Strength = 3,
                        VariableAttackDiceConstant = 1,
                        VariableAttackDiceNumber = 2,
                        VariableDamageDiceConstant = 1,
                        VariableDamageDiceNumber = 1,
                        RerollWound = true
                    }
                },
                InvulnerableSave = 0,
                MinimumSave = 5,
                Toughness = 3,
                Wounds = 1,
                ModelCount = 10,
                Name = "Termagants"
            }
        };
        comparison.AlternateAttackSimulation = new MultiFightSimulation()
        {
            Defender = (UnitProfile)comparison.Simulation1.Defender.Clone(),
            Attacker = (UnitProfile)comparison.Simulation1.Attacker.Clone()
        };
        comparison.AlternateDefenseSimulation = new MultiFightSimulation()
        {
            Defender = (UnitProfile)comparison.Simulation1.Defender.Clone(),
            Attacker = (UnitProfile)comparison.Simulation1.Attacker.Clone()
        };
        AssignMultiSims(1000);
        await FightUnits();
    }
    public async Task SetupDemo2()
    {
        comparison = new Comparison();
        comparison.Simulation1 = new MultiFightSimulation()
        {

            Defender = new UnitProfile()
            {
                InvulnerableSave = 4,
                MinimumSave = 2,
                Toughness = 5,
                Wounds = 2,
                ModelCount = 5,
                Name = "Terminators"
            },
            Attacker = new UnitProfile()
            {
                Attacks = new List<AttackProfile>()
                {
                    new AttackProfile()
                    {
                        Name = "Soulshatter lascannon",
                        WeaponsInUnit = 2,
                        ArmorPenetration = 3,
                        Attacks = 2,
                        Damage = 1,
                        Skill = 3,
                        Strength = 12,
                        VariableAttackDiceConstant = 1,
                        VariableAttackDiceNumber = 2,
                        VariableDamageDiceConstant = 1,
                        VariableDamageDiceNumber = 1,
                        VariableAttackDiceSides =6,
                        IsVariableDamage = true
                    },
                    new AttackProfile()
                    {
                        Name = "Twin heavy bolter",
                        WeaponsInUnit = 1,
                        ArmorPenetration = 1,
                        Attacks = 3,
                        Damage = 2,
                        Skill = 3,
                        Strength = 5,
                        VariableAttackDiceConstant = 1,
                        VariableAttackDiceNumber = 2,
                        VariableDamageDiceConstant = 1,
                        VariableDamageDiceNumber = 1
                    },
                    new AttackProfile()
                    {
                        Name = "Combi-bolter",
                        WeaponsInUnit = 1,
                        ArmorPenetration = 0,
                        Attacks = 4,
                        Damage = 1,
                        Skill = 3,
                        Strength = 4,
                        VariableAttackDiceConstant = 1,
                        VariableAttackDiceNumber = 2,
                        VariableDamageDiceConstant = 1,
                        VariableDamageDiceNumber = 1
                    },
                    new AttackProfile()
                    {
                        Name= "Havoc Launcher",
                        IsVariableAttacks=true,
                        Blast=true,
                        WeaponsInUnit=1,
                        Attacks=1,
                        Skill=3,
                        Strength=5,
                        ArmorPenetration = 0,
                        VariableAttackDiceConstant = 0,
                        VariableAttackDiceNumber=1,
                        VariableAttackDiceSides =6,
                        Damage=1
                    }
                },
                InvulnerableSave = 0,
                MinimumSave = 2,
                Toughness = 12,
                Wounds = 16,
                ModelCount = 1,
                Name = "Chaos Land Raider",
                Type = UnitType.Vehicle
            }
        };
        comparison.AlternateAttackSimulation = new MultiFightSimulation()
        {
            Defender = (UnitProfile)comparison.Simulation1.Defender.Clone(),
            Attacker = (UnitProfile)comparison.Simulation1.Attacker.Clone()
        };
        comparison.AlternateDefenseSimulation = new MultiFightSimulation()
        {
            Defender = (UnitProfile)comparison.Simulation1.Defender.Clone(),
            Attacker = (UnitProfile)comparison.Simulation1.Attacker.Clone()
        };
        AssignMultiSims(1000);
        await FightUnits();

    }
    public async Task SetupDemo3()
    {
        comparison = new Comparison()
        {
            ComparingAttackers = true
        };
        comparison.Simulation1 = new MultiFightSimulation()
        {

            Defender = new UnitProfile()
            {
                InvulnerableSave = 5,
                MinimumSave = 5,
                Toughness = 4,
                Wounds = 2,
                ModelCount = 10,
                Name = "Genestealers"
            },
            Attacker = new UnitProfile()
            {
                Attacks = new List<AttackProfile>()
                {
                    new AttackProfile()
                    {
                        Name = "Astartes chainsword",
                        WeaponsInUnit = 9,
                        ArmorPenetration = 1,
                        Attacks = 4,
                        Damage = 1,
                        Skill = 3,
                        Strength = 4,
                        VariableAttackDiceConstant = 1,
                        VariableAttackDiceNumber = 2,
                        VariableDamageDiceConstant = 1,
                        VariableDamageDiceNumber = 1,
                        Melee=true
                    },
                    new AttackProfile()
                    {
                        Name = "Power weapon",
                        WeaponsInUnit = 1,
                        ArmorPenetration = 2,
                        Attacks = 4,
                        Damage = 1,
                        Skill = 3,
                        Strength = 5,
                        VariableAttackDiceConstant = 1,
                        VariableAttackDiceNumber = 2,
                        VariableDamageDiceConstant = 1,
                        VariableDamageDiceNumber = 1,
                        Melee=true

                    }
                },
                InvulnerableSave = 0,
                MinimumSave = 3,
                Toughness = 4,
                Wounds = 2,
                ModelCount = 10,
                Name = "Blood Claws"
            }
        };
        comparison.AlternateAttackSimulation = new MultiFightSimulation()
        {
            Defender = (UnitProfile)comparison.Simulation1.Defender.Clone(),
            Attacker = new UnitProfile()
            {
                Attacks = new List<AttackProfile>()
                {
                    new AttackProfile()
                    {
                        Name = "Close combat weapon",
                        WeaponsInUnit = 9,
                        ArmorPenetration = 0,
                        Attacks = 3,
                        Damage = 1,
                        Skill = 3,
                        Strength = 4,
                        VariableAttackDiceConstant = 1,
                        VariableAttackDiceNumber = 2,
                        VariableDamageDiceConstant = 1,
                        VariableDamageDiceNumber = 1,
                        Melee=true
                    },
                    new AttackProfile()
                    {
                        Name = "Power fist",
                        WeaponsInUnit = 1,
                        ArmorPenetration = 2,
                        Attacks = 3,
                        Damage = 2,
                        Skill = 3,
                        Strength = 8,
                        VariableAttackDiceConstant = 1,
                        VariableAttackDiceNumber = 2,
                        VariableDamageDiceConstant = 1,
                        VariableDamageDiceNumber = 1,
                        Melee=true

                    }
                },
                InvulnerableSave = 0,
                MinimumSave = 3,
                Toughness = 4,
                Wounds = 2,
                ModelCount = 10,
                Name = "Intercessors"
            }
        };
        comparison.AlternateDefenseSimulation = new MultiFightSimulation()
        {
            Defender = (UnitProfile)comparison.Simulation1.Defender.Clone(),
            Attacker = (UnitProfile)comparison.Simulation1.Attacker.Clone()
        };
        AssignMultiSims(1000);
        await FightUnits();
        StateHasChanged();
    }
    private async Task FightUnits()
    {
        await fightSimulationService.ResetDice(comparison.Simulation1);
        StateHasChanged();
        fightSimulationService.SimulateAllFights(comparison.Simulation1);
        ViewSim1 = comparison.Simulation1.FightSimulations.First();
        //if only a single sim, show attacker as column name
        comparison.Simulation1.Stats.ColumnName = comparison.Simulation1.Attacker.Name;
        if (comparison.ComparingAttackers)
        {
            await fightSimulationService.ResetDice(comparison.AlternateAttackSimulation);
            fightSimulationService.SimulateAllFights(comparison.AlternateAttackSimulation);
            ViewSim2 = comparison.AlternateAttackSimulation.FightSimulations.First();
            comparison.AlternateAttackSimulation.Stats.ColumnName = comparison.AlternateAttackSimulation.Attacker.Name;

        }
        else if (comparison.ComparingDefenders)
        {
            await fightSimulationService.ResetDice(comparison.AlternateDefenseSimulation);
            fightSimulationService.SimulateAllFights(comparison.AlternateDefenseSimulation);
            ViewSim2 = comparison.AlternateDefenseSimulation.FightSimulations.First();
            //reassign to defender's name since we are comparing them
            comparison.Simulation1.Stats.ColumnName = comparison.Simulation1.Defender.Name;
            comparison.AlternateDefenseSimulation.Stats.ColumnName = comparison.AlternateDefenseSimulation.Defender.Name;

        }
        StateHasChanged();
    }
    protected override Task OnInitializedAsync()
    {
        comparison = new Comparison();
        comparison.Simulation1 = new MultiFightSimulation()
        {

            Defender = new UnitProfile()
            {
                InvulnerableSave = 0,
                MinimumSave = 3,
                Toughness = 4,
                Wounds = 2,
                ModelCount = 10,
                Name = "intercessor"
            },
            Attacker = new UnitProfile()
            {
                Attacks = new List<AttackProfile>()
                {
                    new AttackProfile()
                    {
                        Name = "Bolt Rifle",
                        WeaponsInUnit = 10,
                        ArmorPenetration = 1,
                        Attacks = 2,
                        Damage = 1,
                        Skill = 3,
                        Strength = 4,
                        VariableAttackDiceConstant = 1,
                        VariableAttackDiceNumber = 2,
                        VariableDamageDiceConstant = 1,
                        VariableDamageDiceNumber = 1
                    }
                },
                InvulnerableSave = 0,
                MinimumSave = 3,
                Toughness = 4,
                Wounds = 2,
                ModelCount = 10,
                Name = "intercessor"
            }
        };
        comparison.AlternateAttackSimulation = new MultiFightSimulation()
        {
            Defender = (UnitProfile)comparison.Simulation1.Defender.Clone(),
            Attacker = (UnitProfile)comparison.Simulation1.Attacker.Clone()
        };
        // comparison.AlternateAttackSimulation.Attacker.Attacks = comparison.Simulation1.Attacker.Attacks.Select(a => (AttackProfile)a.Clone()).ToList();
        comparison.AlternateDefenseSimulation = new MultiFightSimulation()
        {
            Defender = (UnitProfile)comparison.Simulation1.Defender.Clone(),
            Attacker = (UnitProfile)comparison.Simulation1.Attacker.Clone()
        };
        comparison.AlternateDefenseSimulation.Defender.Name = comparison.Simulation1.Defender.Name + "(1)";
        comparison.AlternateAttackSimulation.Attacker.Name = comparison.Simulation1.Attacker.Name + "(1)";
        comparison.AlternateAttackSimulation.Attacker.Attacks[0].Name = comparison.Simulation1.Attacker.Attacks[0].Name + "(1)";
        AssignMultiSims(1000);
        return base.OnInitializedAsync();
    }
}
