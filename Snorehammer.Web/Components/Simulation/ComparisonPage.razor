@page "/"
@using Snorehammer.Web.Components.Unit
@using Snorehammer.Web.FrontendModels
@using Snorehammer.Web.Services
@rendermode InteractiveServer
<h3>Comparison</h3>

<RadzenStack class="rz-p-sm-12">
    <RadzenSwitch @bind-Value=@comparison.ComparingAttackers />
    <RadzenLabel>Compare Attackers</RadzenLabel>
    <RadzenSwitch @bind-Value=@comparison.ComparingDefenders />
    <RadzenLabel>Compare Defenders</RadzenLabel>
    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
        <RadzenSelectBar TValue="int" Size="ButtonSize.Small" Change="x => AssignMultiSims(x)">
            <Items>
                <RadzenSelectBarItem Value="1" Text="Eats food" />
                <RadzenSelectBarItem Value="5" Text="drinks water" />
                <RadzenSelectBarItem Value="10" Text="flaps wings" />
                <RadzenSelectBarItem Value="100" Text="flaps wings" />
                <RadzenSelectBarItem Value="1000" Disabled Text="flaps wings" />
            </Items>
        </RadzenSelectBar>
    </RadzenStack>
</RadzenStack>

<RadzenCard Variant="Variant.Text">

    <h1>Attacker</h1>
    <RadzenCardGroup>
        <AttackInput @bind-attack="comparison.Simulation1.AttackProfile" />
        @if (comparison.ComparingAttackers)
        {
            <AttackInput @bind-attack="comparison.AlternateAttackSimulation.AttackProfile" />
        }
    </RadzenCardGroup>
    <h1>Defender</h1>
    <RadzenCardGroup>
        <UnitInput @bind-Unit="comparison.Simulation1.Defender" Attacker=false />
        @if (comparison.ComparingDefenders)
        {
            <UnitInput @bind-Unit="comparison.AlternateDefenseSimulation.Defender" Attacker=false />
        }
    </RadzenCardGroup>
</RadzenCard>
<RadzenCardGroup>

    <FightResult sim="comparison.Simulation1.FightSimulations.First()"></FightResult>
    @if (comparison.ComparingAttackers)
    {
        <FightResult sim="comparison.AlternateAttackSimulation.FightSimulations.First()"></FightResult>
    }
    @if (comparison.ComparingDefenders)
    {
        <FightResult sim="comparison.AlternateDefenseSimulation.FightSimulations.First()"></FightResult>
    }
</RadzenCardGroup>
<RadzenButton Click=@(() => FightUnits()) Text="Fight all Units" ButtonStyle="ButtonStyle.Primary" />
<RadzenCard>
    @if (ShowTable)
    {

        @if (comparison.ComparingAttackers)
        {
            <ResultsTable sim=@comparison.Simulation1 sim2=@comparison.AlternateAttackSimulation />
        }
        else if (comparison.ComparingDefenders)
        {
            <ResultsTable sim=@comparison.Simulation1 sim2=@comparison.AlternateDefenseSimulation />
        }
        else
        {
            <ResultsTable sim=@comparison.Simulation1 />
        }
    }
</RadzenCard>
@code {
    public Comparison comparison { get; set; }
    public bool ShowTable { get; set; } = true;
    private FightSimulationService fightSimulationService = new FightSimulationService();
    private void AssignMultiSims(int x)
    {
        comparison.Simulation1.SetSimNumber(x);
        comparison.AlternateDefenseSimulation.SetSimNumber(x);
        comparison.AlternateAttackSimulation.SetSimNumber(x);

    }
    private void FightUnits()
    {
        fightSimulationService.SimulateAllFights(comparison.Simulation1);
        if (comparison.ComparingAttackers)
        {
            fightSimulationService.SimulateAllFights(comparison.AlternateAttackSimulation);
        }
        else if (comparison.ComparingDefenders)
        {
            fightSimulationService.SimulateAllFights(comparison.AlternateDefenseSimulation);
        }
    }
    protected override Task OnInitializedAsync()
    {
        comparison = new Comparison();
        comparison.Simulation1 = new MultiFightSimulation()
        {

            Defender = new UnitProfile()
            {
                InvulnerableSave = 0,
                MinimumSave = 3,
                Toughness = 4,
                Wounds = 2,
                ModelCount = 10,
                Name = "intercessor"
            },
            AttackProfile = new AttackProfile()
            {
                ArmorPenetration = 1,
                Attacks = 20,
                Damage = 1,
                Skill = 3,
                Strength = 4,
                VariableAttackDiceConstant = 1,
                VariableAttackDiceNumber = 2,
                VariableDamageDiceConstant = 1,
                VariableDamageDiceNumber = 1
            }
        };
        comparison.AlternateAttackSimulation = new MultiFightSimulation()
        {
            Defender = comparison.Simulation1.Defender,
            AttackProfile = comparison.Simulation1.AttackProfile
        };
        comparison.AlternateDefenseSimulation = new MultiFightSimulation()
        {
            Defender = comparison.Simulation1.Defender,
            AttackProfile = comparison.Simulation1.AttackProfile
        };

        return base.OnInitializedAsync();
    }
}
