@page "/"
@using Snorehammer.Web.Components.Simulation
@using Snorehammer.Web.Components.Simulation.DiceRoller
@using Snorehammer.Web.Components.Unit
@using Snorehammer.Web.FrontendModels
@using Snorehammer.Web.Services
@rendermode InteractiveServer
<h3>UnitFight</h3>
<RadzenCard Variant="Variant.Text">

    <h1>Attacker</h1>
    <AttackInput @bind-attack="attacker"></AttackInput>
    <h1>Defender</h1>
    <UnitInput @bind-Unit="defender" Attacker=false></UnitInput>
</RadzenCard>
<RadzenButton Click=@(() => FightUnits()) Text="Fight Units" ButtonStyle="ButtonStyle.Primary" />
<RadzenButton Click=@(() => ResetDice()) Text="Reset" ButtonStyle="ButtonStyle.Danger" />
@if (FightComplete)
{
    <RadzenCard Variant="Variant.Text">
        <h1>Results</h1>
        <br />



    @if (sim.AttackProfile.IsVariableAttacks)
    {
            <DicePanel sim="@sim"
                       Title="Number of Attacks"
                       RollString1=@($"Rolling: {sim.AttackProfile.VariableAttackDiceNumber} d{sim.AttackProfile.VariableAttackDiceSides} + {sim.AttackProfile.VariableAttackDiceConstant}" + (sim.BlastBonus > 0 ? $" + {@sim.BlastBonus}" : ""))
                       RollString2=@($"Total: {sim.AttackNumber}")
                       DiceList="@sim.AttackDice" />
    }
        <DicePanel sim="@sim"
                   Title="To Hit Roll"
                   RollString1=@($"Target: {attacker.Skill}")
                   RollString2=@($"Rolling {sim.AttackNumber}")
                   DiceList="@sim.ToHitDice"
                   CriticalMatters="@(attacker.Sustained || attacker.Lethal)" />
        <DicePanel sim="@sim"
                   Title="To Wound Roll"
                   RollString1=@($"Target: {(sim.ModdedWoundTarget > 0 ? sim.ModdedWoundTarget :sim.WoundTarget)}")
                   RollString2=@($"Rolling: {sim.StrengthDice.Count}")
                   DiceList="@sim.StrengthDice"
                   CriticalMatters="@(attacker.Devastating)" />
        <DicePanel sim="@sim"
                   Title="To Wound Roll"
                   RollString1=@($"Target: {sim.ArmorSave}")
                   RollString2=@($"Rolling: {sim.ArmorDice.Count}")
                   DiceList="@sim.ArmorDice" />

    @if (sim.AttackProfile.IsVariableDamage)
    {


            <DicePanel sim="@sim"
                       Title="Damage Roll"
                       RollString1=@($"Rolling: {sim.AttackProfile.VariableDamageDiceNumber} d{sim.AttackProfile.VariableDamageDiceSides} + {sim.AttackProfile.VariableDamageDiceConstant}" + (sim.AttackProfile.Melta ? $" + {@sim.AttackProfile.MeltaDamage}" : ""))
                       DiceList="@sim.WoundDice" />
    }
    @if (defender.FeelNoPain)
    {
            <DicePanel sim="@sim"
                       Title="Feel No Pain Roll"
                       RollString1=@($"Target: {sim.Defender.FeelNoPainTarget}")
                       RollString2=@($"Rolling: {sim.DamageNumber}")
                       DiceList="@sim.FeelNoPainDice" />
    }
    </RadzenCard>
    <RadzenCard>

            <h1>Winner:</h1>
            <p>@sim.WinnerMessage</p>
        </RadzenCard>
        <RadzenCard>
            <ResultsTable sim=@sim />
        </RadzenCard>
        <RadzenButton Click=@(() => FightUnits()) Text="Fight Again" ButtonStyle="ButtonStyle.Base" />
        }
        else if (!FightComplete && !simulating)
        {
        <h1>LOADING</h1>

        }


@code {
    private FightSimulation sim { get; set; } = new FightSimulation();
    private UnitProfile defender { get; set; }
    private bool FightComplete { get; set; } = false;
    private bool simulating { get; set; } = true;
    private AttackProfile attacker { get; set; }
    private FightSimulationService fightSimulationService = new FightSimulationService();
    protected override Task OnInitializedAsync()
    {
        defender = new UnitProfile()
        {
            InvulnerableSave = 0,
            MinimumSave = 3,
            Toughness = 4,
            Wounds = 2,
            ModelCount = 10,
            Name = "intercessor"
        };
        attacker = new AttackProfile()
        {
            ArmorPenetration = 1,
            Attacks = 20,
            Damage = 1,
            Skill = 3,
            Strength = 4,
            VariableAttackDiceConstant = 1,
            VariableAttackDiceNumber = 2,
            VariableDamageDiceConstant = 1,
            VariableDamageDiceNumber = 1
        };
        return base.OnInitializedAsync();
    }
    private async Task FightUnits()
    {
        await ResetDice();
        simulating = true;
        if (sim.AttackProfile.IsVariableAttacks)
        {
            fightSimulationService.RollAttackDice(sim);
        }
        fightSimulationService.RollToHit(sim);
        fightSimulationService.RollStrengthStep(sim);
        fightSimulationService.RollArmorSaves(sim);

        if (sim.AttackProfile.IsVariableDamage)
        {
            fightSimulationService.RollDamageDice(sim);
        }
        if (defender.FeelNoPain)
        {
            fightSimulationService.RollFeelNoPain(sim);
        }
        sim.WinnerMessage = fightSimulationService.GenerateWinnerMessage(sim);
        FightComplete = true;
        simulating = false;
    }
    private async Task ResetDice()
    {
        FightComplete = false;
        sim = new FightSimulation()
        {
            AttackProfile = attacker,
            Defender = defender
        };
        simulating = false;
        StateHasChanged();
        await Task.Yield();
    }
}
