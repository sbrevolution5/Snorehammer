@using Snorehammer.Web.Components.Simulation
@using Snorehammer.Web.Components.Simulation.DiceRoller
@using Snorehammer.Web.Components.Unit
@using Snorehammer.Web.FrontendModels
@using Snorehammer.Web.FrontendModels.Simulations
@using Snorehammer.Web.Services
@rendermode InteractiveServer
<RadzenCard>
    @if (sim is not null)
    {
        <RadzenCard Variant="Variant.Text">
            <h1>Results for @sim.Weapon.Name</h1>
            <br />
            @if (sim.Weapon.IsVariableAttacks)
            {
                <DicePanel sim="@sim"
                           Title="Number of Attacks"
                           RollString1=@($"Rolling: {sim.Weapon.VariableAttackDiceNumber} d{sim.Weapon.VariableAttackDiceSides} + {sim.Weapon.VariableAttackDiceConstant}" + (sim.BlastBonus > 0 ? $" + {@sim.BlastBonus}" : "") + $" x {sim.Weapon.WeaponsInUnit}")
                           RollString2=@($"Total: {sim.Stats.AttackNumber}")
                           DiceList="@sim.AttackDice" 
                           HasConstant="@VariableAttackWithConstant"
                           ConstantValue="sim.Weapon.VariableAttackDiceConstant"/>
            }
            <DicePanel sim="@sim"
                       Title="To Hit Roll"
                       RollString1=@($"Target: {sim.Weapon.Skill}")
                       RollString2=@($"Rolling {sim.Stats.AttackNumber}")
                       DiceList="@sim.ToHitDice"
                       CriticalMatters="@(sim.Weapon.Sustained || sim.Weapon.Lethal)" />
            <DicePanel sim="@sim"
                       Title="To Wound Roll"
                       RollString1=@($"Target: {(sim.ModdedWoundTarget > 0 ? sim.ModdedWoundTarget :sim.WoundTarget)}")
                       RollString2=@($"Rolling: {sim.StrengthDice.Count}")
                       DiceList="@sim.StrengthDice"
                       CriticalMatters="@(sim.Weapon.Devastating)" />
            <DicePanel sim="@sim"
                       Title="Armor Saves"
                       RollString1=@($"Target: {sim.ArmorSave}")
                       RollString2=@($"Rolling: {sim.ArmorDice.Count}")
                       DiceList="@sim.ArmorDice" />

            @if (sim.Weapon.IsVariableDamage)
            {
                <DicePanel sim="@sim"
                           Title="Damage Roll"
                           RollString1=@($"Rolling: {sim.Weapon.VariableDamageDiceNumber} d{sim.Weapon.VariableDamageDiceSides} + {sim.Weapon.VariableDamageDiceConstant}" + (sim.Weapon.Melta ? $" + {@sim.Weapon.MeltaDamage}" : ""))
                           DiceList="@sim.WoundDice" 
                           HasConstant="true"
                           ConstantValue="@TotalDamageConstant"/>
            }
            @if (sim.Defender.FeelNoPain)
            {
                <DicePanel sim="@sim"
                           Title="Feel No Pain Roll"
                           RollString1=@($"Target: {sim.Defender.FeelNoPainTarget}")
                           RollString2=@($"Rolling: {sim.Stats.DamageNumber}")
                           DiceList="@sim.FeelNoPainDice" />
            }
        </RadzenCard>
       
    }
</RadzenCard>

@code {
    [Parameter]
    public WeaponSimulation sim { get; set; }
    private bool FightComplete { get; set; } = false;
    private bool simulating { get; set; } = true;
    private bool VariableAttackWithConstant { get; set; } = false;
    private bool VariableDamageWithConstant { get; set; } = false;
    private int TotalDamageConstant { get; set; } = 0;
    protected override Task OnInitializedAsync()
    {
        if (sim.Weapon.IsVariableAttacks && sim.Weapon.VariableAttackDiceConstant > 0)
        {
            VariableAttackWithConstant = true;
        }
        if ((sim.Weapon.IsVariableDamage && sim.Weapon.VariableDamageDiceConstant > 0) || 
            (sim.Weapon.Melta && sim.Weapon.MeltaDamage >0))
        {
            VariableDamageWithConstant = true;
            TotalDamageConstant = sim.Weapon.VariableAttackDiceConstant;
            if (sim.Weapon.Melta)
            {
                TotalDamageConstant += sim.Weapon.MeltaDamage;
            }
        }
        return base.OnInitializedAsync();
    }
}

