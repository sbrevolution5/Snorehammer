@using Snorehammer.Web.FrontendModels
@using Snorehammer.Web.FrontendModels.Profiles
@using Snorehammer.Web.FrontendModels.Stats
@using Snorehammer.Web.Services
<RadzenStack>

    <RadzenText>Compare Units</RadzenText>
    <ComparisonGraph graphData="unitGraphData"></ComparisonGraph>
</RadzenStack>
<RadzenStack>
    <RadzenText>Compare Weapons </RadzenText>
    <RadzenRow>
        <RadzenLabel>Weapon 1</RadzenLabel>
        <RadzenDropDown @bind-Value=@weapon1Dropdown SelectedItemChanged=@(() => WeaponGraphChanged()) Data=@GroupedWeapons>
            <Template>
                <span style="display:inline-block; font-weight: @(context.UnitName != null ? "bold" : "normal");">
                    @(context.UnitName ?? $"{context.AttackName}")
                </span>
            </Template>
        </RadzenDropDown>
        <RadzenLabel>Weapon 2</RadzenLabel>
        <RadzenDropDown @bind-Value=@weapon2Dropdown SelectedItemChanged=@(() => WeaponGraphChanged()) Data=@GroupedWeapons>
            <Template>
                <span style="display:inline-block; font-weight: @(context.UnitName != null ? "bold" : "normal");">
                    @(context.UnitName ?? $"{context.AttackName}")
                </span>
            </Template>
        </RadzenDropDown>

    </RadzenRow>
    @if (weaponGraphData is not null)
    {

        <ComparisonGraph graphData="weaponGraphData"></ComparisonGraph>
    }
</RadzenStack>
@code {
    [Parameter]
    public Comparison comparison { get; set; }
    public GraphData unitGraphData { get; set; }
    public GraphData weaponGraphData { get; set; }
    private GroupData weapon1Dropdown { get; set; }
    private GroupData weapon2Dropdown { get; set; }
    private IEnumerable<GroupData> GroupedWeapons { get; set; }
    protected override Task OnInitializedAsync()
    {
        unitGraphData = DataFromComparison();

        return base.OnInitializedAsync();
    }
    protected void WeaponGraphChanged()
    {
        if (weapon1Dropdown is not null && weapon2Dropdown is not null)
        {
            if (!string.IsNullOrEmpty(weapon1Dropdown.AttackName) && !string.IsNullOrEmpty(weapon2Dropdown.AttackName))
            {
                weaponGraphData = DataFromWeapons();
            }
        }
    }
    private GraphData DataFromComparison()
    {
        var graphData = new GraphData();
        graphData.dataA = comparison.Simulation1.FightSimulations.Select(f => f.Stats).ToList();
        graphData.titleA = comparison.Simulation1.Stats.ColumnName;
        graphData.multiA = comparison.Simulation1.Stats;
        graphData.showFnp = comparison.Simulation1.Defender.FeelNoPain;
        graphData.isMultiAttack = comparison.Simulation1.Attacker.Attacks.Any(a => a.IsVariableAttacks);
        if (comparison.ComparingAttackers)
        {
            graphData.dataB = comparison.AlternateAttackSimulation.FightSimulations.Select(f => f.Stats).ToList();
            graphData.titleB = comparison.AlternateAttackSimulation.Stats.ColumnName;
            graphData.multiB = comparison.AlternateAttackSimulation.Stats;
            graphData.isMultiAttack = comparison.AlternateAttackSimulation.Attacker.Attacks.Any(a => a.IsVariableAttacks);
        }
        else if (comparison.ComparingDefenders)
        {
            graphData.dataB = comparison.AlternateDefenseSimulation.FightSimulations.Select(f => f.Stats).ToList();
            graphData.titleB = comparison.AlternateDefenseSimulation.Stats.ColumnName;
            graphData.multiB = comparison.AlternateDefenseSimulation.Stats;
            graphData.showFnp = comparison.AlternateDefenseSimulation.Defender.FeelNoPain;

        }
        else
        {
            graphData.titleB = "";
            graphData.dataB = new List<FightStats>();
            graphData.multiB = new MultiFightStats()
            {
                LessThanHalf = -1,
                LostAModel = -1,
                UnitDamaged = -1,
                UnitEntirelyDestroyed = -1
            };
        }
        return graphData;
    }
    private GraphData DataFromWeapons()
    {
        //if we aren't comparing, we should show the data between two different weapons on the same unit.
        var graphData = new GraphData();
        graphData.showFnp = comparison.Simulation1.Defender.FeelNoPain;
        graphData.isMultiAttack = comparison.Simulation1.Attacker.Attacks.Any(a => a.IsVariableAttacks);
        //if we compare attackers, we should show the data from separate simulations
        if (comparison.ComparingAttackers)
        {
            graphData.dataA = comparison.Simulation1.FightSimulations.SelectMany(f => f.WeaponSimulations.Select(w => w.Stats)).Where(s => s.ColumnName == weapon1Dropdown.AttackName).ToList();
            graphData.titleA = graphData.dataA.FirstOrDefault().ColumnName;
            graphData.multiA = comparison.Simulation1.Stats.PerWeaponStats.First(s => s.ColumnName == weapon1Dropdown.AttackName);
            graphData.dataB = comparison.AlternateAttackSimulation.FightSimulations.SelectMany(f => f.WeaponSimulations.Select(w => w.Stats)).Where(s => s.ColumnName == weapon2Dropdown.AttackName).ToList();
            graphData.titleB = graphData.dataB.FirstOrDefault().ColumnName;
            graphData.multiB = comparison.AlternateAttackSimulation.Stats.PerWeaponStats.First(s => s.ColumnName == weapon2Dropdown.AttackName);
        }
        //if we compare defenders, we should show data from one weapon against two different defenders
        else if (comparison.ComparingDefenders)
        {

        }
        else
        {
            graphData.dataA = comparison.Simulation1.FightSimulations.SelectMany(f => f.WeaponSimulations.Select(w => w.Stats)).Where(s => s.ColumnName == weapon1Dropdown.AttackName).ToList();
            graphData.titleA = graphData.dataA.FirstOrDefault().ColumnName;
            graphData.multiA = comparison.Simulation1.Stats.PerWeaponStats.First(s => s.ColumnName == weapon1Dropdown.AttackName);
            graphData.dataB = comparison.Simulation1.FightSimulations.SelectMany(f => f.WeaponSimulations.Select(w => w.Stats)).Where(s => s.ColumnName == weapon2Dropdown.AttackName).ToList();
            graphData.titleB = graphData.dataB.FirstOrDefault().ColumnName;
            graphData.multiB = comparison.Simulation1.Stats.PerWeaponStats.First(s => s.ColumnName == weapon2Dropdown.AttackName);
        }
        return graphData;
    }
    protected override Task OnParametersSetAsync()
    {
        GroupWeapons();
        return base.OnParametersSetAsync();
    }
    private void GroupWeapons()
    {
        var attacks = new List<AttackProfile>();
        //for each simulation, get a list of the attacker's weapons
        attacks.AddRange(comparison.Simulation1.Attacker.Attacks);
        if (comparison.ComparingAttackers)
        {
            attacks.AddRange(comparison.AlternateAttackSimulation.Attacker.Attacks);
        }
        GroupedWeapons = attacks.GroupBy(a => a.UnitName)
            .SelectMany(g => new GroupData[] {
                new GroupData() { UnitName = g.Key }
            }
                .Concat(g.Select(a =>
                    new GroupData()
                    {
                        AttackId = a.Id,
                        AttackName = a.Name
                    })
                )
            ).ToList();
        //group by unit name
    }
    private class GroupData
    {
        public string UnitName { get; set; }
        public string AttackName { get; set; }
        public int AttackId { get; set; }
    }
}




