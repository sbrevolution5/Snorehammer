@using Snorehammer.Web.FrontendModels
@using Snorehammer.Web.FrontendModels.Profiles
@using Snorehammer.Web.FrontendModels.Stats
@using Snorehammer.Web.Services
<RadzenStack>

    <RadzenText>Compare Units</RadzenText>
    <ComparisonGraph comparison="@comparison" TotalSims="comparison.Simulation1.Rounds"></ComparisonGraph>
</RadzenStack>
<RadzenStack>

    <RadzenText>Compare Weapons</RadzenText>
    <RadzenRow>
        <RadzenLabel>Weapon 1</RadzenLabel>
        <RadzenDropDown @bind-Value=@weapon1Dropdown Data=@WeaponChoices/>
    </RadzenRow>
    <ComparisonGraph comparison="@comparison" TotalSims="comparison.Simulation1.Rounds"></ComparisonGraph>
</RadzenStack>
@code {
    [Parameter]
    public Comparison comparison { get; set; }
    public GraphData unitGraphData { get; set; }
    public GraphData weaponGraphData { get; set; }
    public Comparison WeaponComparison { get; set; }
    public string weapon1Dropdown { get; set; }
    public IEnumerable<AttackProfile> WeaponChoices { get; set; }
    protected override Task OnInitializedAsync()
    {
        unitGraphData = DataFromComparison();
        return base.OnInitializedAsync();
    }
    private GraphData DataFromComparison()
    {
        var graphData = new GraphData();
        graphData.dataA = comparison.Simulation1.FightSimulations.Select(f => f.Stats).ToList();
        graphData.titleA = comparison.Simulation1.Stats.ColumnName;
        graphData.multiA = comparison.Simulation1.Stats;
        graphData.showFnp = comparison.Simulation1.Defender.FeelNoPain;
        graphData.isMultiAttack = comparison.Simulation1.Attacker.Attacks.Any(a => a.IsVariableAttacks);
        if (comparison.ComparingAttackers)
        {
            graphData.dataB = comparison.AlternateAttackSimulation.FightSimulations.Select(f => f.Stats).ToList();
            graphData.titleB = comparison.AlternateAttackSimulation.Stats.ColumnName;
            graphData.multiB = comparison.AlternateAttackSimulation.Stats;
            graphData.isMultiAttack = comparison.AlternateAttackSimulation.Attacker.Attacks.Any(a => a.IsVariableAttacks);
        }
        else if (comparison.ComparingDefenders)
        {
            graphData.dataB = comparison.AlternateDefenseSimulation.FightSimulations.Select(f => f.Stats).ToList();
            graphData.titleB = comparison.AlternateDefenseSimulation.Stats.ColumnName;
            graphData.multiB = comparison.AlternateDefenseSimulation.Stats;
            graphData.showFnp = comparison.AlternateDefenseSimulation.Defender.FeelNoPain;

        }
        else
        {
            graphData.titleB = "";
            graphData.dataB = new List<FightStats>();
            graphData.multiB = new MultiFightStats()
            {
                LessThanHalf = -1,
                LostAModel = -1,
                UnitDamaged = -1,
                UnitEntirelyDestroyed = -1
            };
        }
        return graphData;
    }
    protected override Task OnParametersSetAsync()
    {
        WeaponChoices = comparison.Simulation1.Attacker.Attacks;
        return base.OnParametersSetAsync();
    }
}


