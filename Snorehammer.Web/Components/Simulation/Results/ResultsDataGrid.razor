@using Microsoft.AspNetCore.Mvc.ViewFeatures
@using Snorehammer.Web.FrontendModels.Stats
@using Snorehammer.Web.FrontendModels.Utility
<RadzenDataGrid Data="@data">
    <Columns>
        @foreach (var column in headers)
        {
            <RadzenDataGridColumn @key=@column.Key Title="@column.Key" Type="column.Value"
                                  Property="@PropertyAccess.GetDynamicPropertyExpression(column.Key, column.Value)">
                <Template>
                    @(context.Values.All(v => v is string) ? context[column.Key] : String.Format("{0}", context[column.Key]))
                </Template>
            </RadzenDataGridColumn>
        }
    </Columns>
</RadzenDataGrid>

@code {
    [Parameter]
    public IEnumerable<MultiFightStats> stats { get; set; }
    public IEnumerable<IDictionary<string, object>> data { get; set; }
    public IDictionary<string, Type> headers { get; set; } = new Dictionary<string, Type>();
    private List<RowToPropertyCorrelation> rowNames { get; set; } = new List<RowToPropertyCorrelation>
    {
            new RowToPropertyCorrelation("Attacks Made","AttackNumber"),
            new RowToPropertyCorrelation("Attacks Hit", "AttacksHit"),
            new RowToPropertyCorrelation("Wounds Inflicted", "WoundsInflicted"),
            new RowToPropertyCorrelation("Armor Saves Failed", "ArmorSavesFailed"),
            new RowToPropertyCorrelation("Final Damage", "DamageNumber"),
            new RowToPropertyCorrelation("Feel No Pain Successful", "FeelNoPainMade"),
            new RowToPropertyCorrelation("Models Destroyed", "ModelsDestroyed"),
            new RowToPropertyCorrelation("Unit was damaged", "UnitDamaged"),
            new RowToPropertyCorrelation("Lost a Model", "LostAModel"),
            new RowToPropertyCorrelation("Left Below Half Strength", "LessThanHalf"),
            new RowToPropertyCorrelation("Unit Was Destroyed","UnitEntirelyDestroyed")
    };
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        // crosstab query


        //First row should be the column of properties
        headers.Add("Stat", typeof(string));
        // Add dynamic columns
        foreach (var i in stats)
        {
            headers.Add(i.ColumnName.ToString(), typeof(float));
        }
        // Transpose crosstab data to "rows as columns" collection
        //data will contain rows, and each row will have dictionary values for the header and the value within
        data = Enumerable.Range(0, rowNames.Count()).Select(i =>
            {
                var row = new Dictionary<string, object>();
                foreach (var header in headers)
                {
                    
                    if (header.Value == typeof(string))
                    {
                        row.Add("Stat", rowNames[i].RowName);
                    }
                    else
                    {
                        var dataRow = stats.Where(d => d.ColumnName.ToString() == header.Key).FirstOrDefault();
                        Dictionary<string,object> dataRowDict = HtmlHelper.ObjectToDictionary(dataRow).ToDictionary();
                        //adds the column name to the row, and the relevant stat
                        row.Add(dataRow.ColumnName, dataRowDict[rowNames[i].PropertyName]);
                    }
                }

                return row;
            });
    }

}
