@using Snorehammer.Web.Components.Simulation
@using Snorehammer.Web.Components.Simulation.DiceRoller
@using Snorehammer.Web.Components.Unit
@using Snorehammer.Web.FrontendModels
@using Snorehammer.Web.Services
@rendermode InteractiveServer
<RadzenCard>
    @if (sim is not null)
    {
        <RadzenCard Variant="Variant.Text">
            <h1>Results for @sim.Attacker.Attacks[0].Name</h1>
            <br />



            @if (sim.Attacker.Attacks[0].IsVariableAttacks)
            {
                <DicePanel sim="@sim"
                           Title="Number of Attacks"
                           RollString1=@($"Rolling: {sim.Attacker.Attacks[0].VariableAttackDiceNumber} d{sim.Attacker.Attacks[0].VariableAttackDiceSides} + {sim.Attacker.Attacks[0].VariableAttackDiceConstant}" + (sim.BlastBonus > 0 ? $" + {@sim.BlastBonus}" : ""))
                           RollString2=@($"Total: {sim.AttackNumber}")
                           DiceList="@sim.AttackDice" />
            }
            <DicePanel sim="@sim"
                       Title="To Hit Roll"
                       RollString1=@($"Target: {sim.Attacker.Attacks[0].Skill}")
                       RollString2=@($"Rolling {sim.AttackNumber}")
                       DiceList="@sim.ToHitDice"
                       CriticalMatters="@(sim.Attacker.Attacks[0].Sustained || sim.Attacker.Attacks[0].Lethal)" />
            <DicePanel sim="@sim"
                       Title="To Wound Roll"
                       RollString1=@($"Target: {(sim.ModdedWoundTarget > 0 ? sim.ModdedWoundTarget :sim.WoundTarget)}")
                       RollString2=@($"Rolling: {sim.StrengthDice.Count}")
                       DiceList="@sim.StrengthDice"
                       CriticalMatters="@(sim.Attacker.Attacks[0].Devastating)" />
            <DicePanel sim="@sim"
                       Title="To Wound Roll"
                       RollString1=@($"Target: {sim.ArmorSave}")
                       RollString2=@($"Rolling: {sim.ArmorDice.Count}")
                       DiceList="@sim.ArmorDice" />

            @if (sim.Attacker.Attacks[0].IsVariableDamage)
            {


                <DicePanel sim="@sim"
                           Title="Damage Roll"
                           RollString1=@($"Rolling: {sim.Attacker.Attacks[0].VariableDamageDiceNumber} d{sim.Attacker.Attacks[0].VariableDamageDiceSides} + {sim.Attacker.Attacks[0].VariableDamageDiceConstant}" + (sim.Attacker.Attacks[0].Melta ? $" + {@sim.Attacker.Attacks[0].MeltaDamage}" : ""))
                           DiceList="@sim.WoundDice" />
            }
            @if (sim.Defender.FeelNoPain)
            {
                <DicePanel sim="@sim"
                           Title="Feel No Pain Roll"
                           RollString1=@($"Target: {sim.Defender.FeelNoPainTarget}")
                           RollString2=@($"Rolling: {sim.DamageNumber}")
                           DiceList="@sim.FeelNoPainDice" />
            }
        </RadzenCard>
        <RadzenCard>

            <h1>Winner:</h1>
            <p>@sim.WinnerMessage</p>
        </RadzenCard>
        <RadzenButton Click=@(() => FightUnits()) Text="Fight Again" ButtonStyle="ButtonStyle.Base" />
    }
    else if (!FightComplete && !simulating)
    {
        <h1>LOADING</h1>

    }
</RadzenCard>

@code {
    [Parameter]
    public FightSimulation sim { get; set; }
    private bool FightComplete { get; set; } = false;
    private bool simulating { get; set; } = true;
    private FightSimulationService fightSimulationService = new FightSimulationService();
    private async Task FightUnits()
    {
        await ResetDice();
        simulating = true;
        fightSimulationService.SimulateFight(sim);
        FightComplete = true;
        simulating = false;
    }
    private async Task ResetDice()
    {
        FightComplete = false;
        sim = new FightSimulation()
        {
            Attacker = sim.Attacker,
            Defender = sim.Defender
        };
        simulating = false;
        StateHasChanged();
        await Task.Yield();
    }
}
