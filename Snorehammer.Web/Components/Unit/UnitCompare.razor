@page "/"
@using Snorehammer.Web.Components.Simulation.DiceRoller
@using Snorehammer.Web.FrontendModels
@using Snorehammer.Web.Services
@rendermode InteractiveServer
<h3>UnitCompare</h3>
<div class="container">
    <div class="col-6">

        <h4>Attacker</h4>
        <AttackInput @bind-attack="attacker"></AttackInput>
        <h4>Defender</h4>
        <UnitInput @bind-Unit="defender" Attacker=false></UnitInput>
        <button @onclick="FightUnits">Fight</button><button @onclick="ResetDice">Reset</button>
        @if (FightComplete)
        {

            <h4>results</h4>
            <h2>Attack Results</h2>
            <div class="container">
                <div class="row">
                    <div class="col-6">
                        <h3>Target: @attacker.Skill</h3>
                    </div>
                    <div class="col-6">
                        <h3>Rolling: @attacker.Attacks</h3>
                    </div>
                </div>
                <div class="row">
                    @foreach (var die in sim.ToHitDice)
                    {
                        <div class="col-1">

                            <DieDisplay die="@die" CriticalMatters="@(attacker.Sustained || attacker.Lethal)"></DieDisplay>
                        </div>
                    }
                </div>
            </div>
            <h2>Strength vs toughness</h2>
            <div class="container">
                <div class="row">
                    <div class="col-6">
                        <h3>Target: @fightSimulationService.DetermineWoundTarget(defender.Toughness,attacker.Strength)</h3>
                    </div>
                    <div class="col-6">
                        <h3>Rolling:
                            @sim.ToHitDice.Where(d => d.Success).Count() 
                            @{
                                var sustainedDice = sim.ToHitDice.Where(d => d.Critical).Count() > 0;
                            }
                            @if (attacker.Sustained && sustainedDice)
                            {
                                <span> + @sim.ToHitDice.Where(d=>d.Critical).Count() (sustained)</span>
                            }
                        </h3>
                    </div>
                </div>
                <div class="row">
                    @foreach (var die in sim.StrengthDice)
                    {
                        <div class="col-1">

                            <DieDisplay die="@die" CriticalMatters="@attacker.Devastating"></DieDisplay>
                        </div>
                    }
                </div>
            </div>
            <h2>Armor rolls</h2>
            <div class="container">
                <div class="col-6">
                    <h3>Target: @fightSimulationService.DetermineArmorSave(sim)</h3>
                    @if (sim.CoverIgnored)
                    {
                        <h4>Cover did not matter</h4>
                    }
                </div>
                <div class="col-6">
                    <h3>Rolling: @sim.StrengthDice.Where(d => d.Success).Count()</h3>
                </div>
                <div class="row">
                    @foreach (var die in sim.ArmorDice)
                    {
                        <div class="col-1">

                            <DieDisplay die="@die"></DieDisplay>
                        </div>
                    }
                </div>
            </div>
            @* <h2>Wound Rolls</h2> *@
            @if (defender.FeelNoPain)
            {
                <h2>Feel No Pain Rolls</h2>
                <div class="container">
                    <div class="col-6">
                        <h3>Target: @defender.FeelNoPainTarget</h3>
                    </div>
                    <div class="col-6">
                        <h3>Rolling: @(sim.ArmorDice.Where(d => !d.Success).Count()*attacker.Damage)</h3>
                    </div>
                    <div class="row">
                        @foreach (var die in sim.FeelNoPainDice)
                        {
                            <div class="col-1">
                                <DieDisplay die="@die"></DieDisplay>
                            </div>
                        }
                    </div>
                </div>
            }
            <h3>Winner:</h3>
            <p>@sim.WinnerMessage</p>
        }
        else{
            <h1>LOADING</h1>
        }
    </div>
    <div class="col-6">

    </div>
</div>
<button @onclick="FightUnits">Go again?</button>
@code {
    private FightSimulation sim { get; set; } = new FightSimulation();
    private UnitProfile defender { get; set; }
    private bool FightComplete { get; set; } = false;
    private AttackProfile attacker { get; set; }
    private FightSimulationService fightSimulationService = new FightSimulationService();
    protected override Task OnInitializedAsync()
    {
        defender = new UnitProfile()
            {
                InvulnerableSave = 0,
                MinimumSave = 3,
                Toughness = 4,
                Wounds = 2,
                ModelCount = 10,
                Name = "intercessor"
            };
        attacker = new AttackProfile()
            {
                ArmorPenetration = 1,
                Attacks = 20,
                Damage = 1,
                Skill = 3,
                Strength = 4

            };
        return base.OnInitializedAsync();
    }
    private async Task FightUnits()
    {
        await ResetDice();
        fightSimulationService.RollToHit(sim);
        fightSimulationService.RollStrengthStep(sim);
        fightSimulationService.RollArmorSaves(sim);
        if (defender.FeelNoPain)
        {
            fightSimulationService.RollFeelNoPain(sim);
        }
        sim.WinnerMessage = fightSimulationService.GenerateWinnerMessage(sim);
        FightComplete = true;
    }
    private async Task ResetDice()
    {
        FightComplete = false;
        sim = new FightSimulation()
        {
            AttackProfile = attacker,
            Defender = defender
        };
        StateHasChanged();
        await Task.Yield();
    }
}
