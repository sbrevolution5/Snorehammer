@page "/"
@using Snorehammer.Web.Components.Simulation.DiceRoller
@using Snorehammer.Web.FrontendModels
@using Snorehammer.Web.Services
@rendermode InteractiveServer
<h3>UnitCompare</h3>
<RadzenCard Variant="Variant.Text">

    <h1>Attacker</h1>
    <AttackInput @bind-attack="attacker"></AttackInput>
    <h1>Defender</h1>
    <UnitInput @bind-Unit="defender" Attacker=false></UnitInput>
</RadzenCard>
<RadzenButton Click=@(() => FightUnits()) Text="Fight Units" ButtonStyle="ButtonStyle.Primary" />
<RadzenButton Click=@(() => ResetDice()) Text="Reset" ButtonStyle="ButtonStyle.Danger" />
@if (FightComplete)
{
    <RadzenCard Variant="Variant.Text">

        <h1>Results</h1>
        <br />
        <RadzenAccordion Multiple="true">
            <Items>


                @if (sim.AttackProfile.IsVariableAttacks)
                {
                    <RadzenAccordionItem Selected="true" Text="Number Of Attacks">

                        <div class="container">
                            <div class="row">
                                <div class="col-6">
                                    <h3>
                                        Rolling: @attacker.VariableAttackDiceNumber
                                        d @attacker.VariableAttackDiceSides
                                        + @attacker.VariableAttackDiceConstant
                                        @if (sim.BlastBonus > 0)
                                        {
                                            <span> + @sim.BlastBonus</span>
                                        }
                                    </h3>
                                </div>
                                <div class="col-6">
                                    <h3> Total: @sim.AttackNumber</h3>
                                </div>
                            </div>
                            <div class="row">
                                @foreach (var die in sim.AttackDice)
                                {
                                    <div class="col-1">

                                        <DieDisplay die="@die"></DieDisplay>
                                    </div>
                                }
                            </div>
                        </div>
                    </RadzenAccordionItem>
                }
                <RadzenAccordionItem Selected="true" Text="To Hit Results">
                    <div class="container">
                        <div class="row">
                            <div class="col-6">
                                <h3>Target: @attacker.Skill</h3>
                            </div>
                            <div class="col-6">
                                <h3>Rolling: @attacker.Attacks</h3>
                            </div>
                        </div>
                        <div class="row">
                            @foreach (var die in sim.ToHitDice)
                            {
                                <div class="col-1">

                                    <DieDisplay die="@die" CriticalMatters="@(attacker.Sustained || attacker.Lethal)"></DieDisplay>
                                </div>
                            }
                        </div>
                    </div>
                </RadzenAccordionItem>
                <RadzenAccordionItem Selected="true" Text="Strength vs Toughness">
                    <div class="container">
                        <div class="row">
                            <div class="col-6">
                                <h3>Target: @fightSimulationService.DetermineWoundTarget(defender.Toughness, attacker.Strength)</h3>
                            </div>
                            <div class="col-6">
                                <h3>
                                    Rolling:
                                    @sim.ToHitDice.Where(d => d.Success).Count()
                                    @{
                                        var sustainedDice = sim.ToHitDice.Where(d => d.Critical).Count() > 0;
                                    }
                                    @if (attacker.Sustained && sustainedDice)
                                    {
                                        <span> + @sim.ToHitDice.Where(d => d.Critical).Count() (sustained)</span>
                                    }
                                </h3>
                            </div>
                        </div>
                        <div class="row">
                            @foreach (var die in sim.StrengthDice)
                            {
                                <div class="col-1">

                                    <DieDisplay die="@die" CriticalMatters="@attacker.Devastating"></DieDisplay>
                                </div>
                            }
                        </div>
                    </div>
                </RadzenAccordionItem>
                <RadzenAccordionItem Selected="true" Text="Armor Rolls">
                    <div class="container">
                        <div class="col-6">
                            <h3>Target: @fightSimulationService.DetermineArmorSave(sim)</h3>
                            @if (sim.CoverIgnored)
                            {
                                <h4>Cover did not matter</h4>
                            }
                        </div>
                        <div class="col-6">
                            <h3>Rolling: @sim.StrengthDice.Where(d => d.Success).Count()</h3>
                        </div>
                        <div class="row">
                            @foreach (var die in sim.ArmorDice)
                            {
                                <div class="col-1">

                                    <DieDisplay die="@die"></DieDisplay>
                                </div>
                            }
                        </div>
                    </div>
                </RadzenAccordionItem>

                @* <h2>Wound Rolls</h2> *@
                @if (defender.FeelNoPain)
                {
                    <RadzenAccordionItem Selected="true" Text="Feel No Pain Rolls">
                        <div class="container">
                            <div class="col-6">
                                <h3>Target: @defender.FeelNoPainTarget</h3>
                            </div>
                            <div class="col-6">
                                <h3>Rolling: @(sim.ArmorDice.Where(d => !d.Success).Count() * attacker.Damage)</h3>
                            </div>
                            <div class="row">
                                @foreach (var die in sim.FeelNoPainDice)
                                {
                                    <div class="col-1">
                                        <DieDisplay die="@die"></DieDisplay>
                                    </div>
                                }
                            </div>
                        </div>
                    </RadzenAccordionItem>

                }
            </Items>

        </RadzenAccordion>
    </RadzenCard>
    <RadzenCard>

        <h1>Winner:</h1>
        <p>@sim.WinnerMessage</p>
    </RadzenCard>
}
else if (!FightComplete && !simulating)
{
    <h1>LOADING</h1>
}

<RadzenButton Click=@(() => FightUnits()) Text="Fight Again" ButtonStyle="ButtonStyle.Base" />

@code {
    private FightSimulation sim { get; set; } = new FightSimulation();
    private UnitProfile defender { get; set; }
    private bool FightComplete { get; set; } = false;
    private bool simulating { get; set; } = true;
    private AttackProfile attacker { get; set; }
    private FightSimulationService fightSimulationService = new FightSimulationService();
    protected override Task OnInitializedAsync()
    {
        defender = new UnitProfile()
        {
            InvulnerableSave = 0,
            MinimumSave = 3,
            Toughness = 4,
            Wounds = 2,
            ModelCount = 10,
            Name = "intercessor"
        };
        attacker = new AttackProfile()
        {
            ArmorPenetration = 1,
            Attacks = 20,
            Damage = 1,
            Skill = 3,
            Strength = 4

        };
        return base.OnInitializedAsync();
    }
    private async Task FightUnits()
    {
        await ResetDice();
        simulating = true;
        if (sim.AttackProfile.IsVariableAttacks)
        {
            fightSimulationService.RollAttackDice(sim);
        }
        fightSimulationService.RollToHit(sim);
        fightSimulationService.RollStrengthStep(sim);
        fightSimulationService.RollArmorSaves(sim);
        if (defender.FeelNoPain)
        {
            fightSimulationService.RollFeelNoPain(sim);
        }
        sim.WinnerMessage = fightSimulationService.GenerateWinnerMessage(sim);
        FightComplete = true;
        simulating = false;
    }
    private async Task ResetDice()
    {
        FightComplete = false;
        sim = new FightSimulation()
        {
            AttackProfile = attacker,
            Defender = defender
        };
        simulating = false;
        StateHasChanged();
        await Task.Yield();
    }
}
