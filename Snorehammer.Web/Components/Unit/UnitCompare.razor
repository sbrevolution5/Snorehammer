@page "/unitcompare"
@using Snorehammer.Web.Components.Simulation.DiceRoller
@using Snorehammer.Web.FrontendModels
@using Snorehammer.Web.Services
@rendermode InteractiveServer
<h3>UnitCompare</h3>
<h4>Attacker</h4>
<AttackInput @bind-attack="attacker"></AttackInput>
<h4>Defender</h4>
<UnitInput @bind-Unit="defender" Attacker=false></UnitInput>
<button @onclick="FightUnits">Fight</button>
@if (FightComplete)
{

    <h4>results</h4>
    //target number for each row?
    <h2>Attack Results</h2>
    <div class="container">
        <div class="row">
            @foreach (var die in AttackDice)
            {
                <div class="col-1">

                    <DieDisplay die="@die"></DieDisplay>
                </div>
            }
        </div>
    </div>
    <h2>Strength vs toughness</h2>
    <div class="container">
        <div class="row">
            @foreach (var die in StrengthDice)
            {
                <div class="col-1">

                    <DieDisplay die="@die"></DieDisplay>
                </div>
            }
        </div>
    </div>
    <h2>Armor rolls</h2>
    <div class="container">
        <div class="row">
            @foreach (var die in ArmorDice)
            {
                <div class="col-1">

                    <DieDisplay die="@die"></DieDisplay>
                </div>
            }
        </div>
    </div>
    <h2>Wound Rolls</h2>
    <h2>Feel No Pain Rolls</h2>
    <h3>Winner:</h3>
}
<button @onclick="FightUnits">Go again?</button>
@code {
    private UnitProfile defender { get; set; }
    private bool FightComplete { get; set; } = false;
    private List<Dice> AttackDice { get; set; }
    private List<Dice> StrengthDice { get; set; }
    private List<Dice> ArmorDice { get; set; }
    private List<Dice> WoundDice { get; set; }
    private AttackProfile attacker { get; set; }
    private FightSimulationService fightSimulationService = new FightSimulationService();
    protected override Task OnInitializedAsync()
    {
        defender = new UnitProfile()
            {
                InvulnerableSave = 4,
                MinimumSave = 3,
                Toughness = 11,
                Wounds = 14,
                Name = "Maleceptor"
            };
        attacker = new AttackProfile()
            {
                ArmorPenetration = -1,
                Attacks = 1,
                Damage = 1,
                Skill = 4,
                Strength = 4

            };
        return base.OnInitializedAsync();
    }
    private void FightUnits()
    {
        AttackDice = fightSimulationService.SimulateToHitRoll(attacker);
        StrengthDice = fightSimulationService.RollStrengthStep(defender, attacker, AttackDice);
        ArmorDice = fightSimulationService.RollArmorSaves(defender, attacker, StrengthDice);
        FightComplete = true;
    }
}
