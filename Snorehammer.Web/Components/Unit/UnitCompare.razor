@page "/"
@using Snorehammer.Web.Components.Simulation
@using Snorehammer.Web.Components.Simulation.DiceRoller
@using Snorehammer.Web.FrontendModels
@using Snorehammer.Web.Services
@rendermode InteractiveServer
<h3>UnitCompare</h3>
<RadzenCard Variant="Variant.Text">

    <h1>Attacker</h1>
    <AttackInput @bind-attack="attacker"></AttackInput>
    <h1>Defender</h1>
    <UnitInput @bind-Unit="defender" Attacker=false></UnitInput>
</RadzenCard>
<RadzenButton Click=@(() => FightUnits()) Text="Fight Units" ButtonStyle="ButtonStyle.Primary" />
<RadzenButton Click=@(() => ResetDice()) Text="Reset" ButtonStyle="ButtonStyle.Danger" />
@if (FightComplete)
{
    <RadzenCard Variant="Variant.Text">
        <h1>Results</h1>
        <br />


        @if (sim.AttackProfile.IsVariableAttacks)
        {
            <RadzenPanel AllowCollapse="true" class="rz-my-10 rz-mx-auto">
                <HeaderTemplate>
                    <RadzenText TextStyle="TextStyle.H6" class="rz-display-flex rz-align-items-center rz-m-0">
                        <RadzenIcon Icon="account_box" class="rz-me-1" /><b>Number of Attacks</b>
                    </RadzenText>
                </HeaderTemplate>
                <ChildContent>
                    <RadzenRow>
                        <RadzenColumn Size="6">
                            <h3>
                                Rolling: @attacker.VariableAttackDiceNumber
                                d @attacker.VariableAttackDiceSides
                                + @attacker.VariableAttackDiceConstant
                                @if (sim.BlastBonus > 0)
                                {
                                    <span> + @sim.BlastBonus</span>
                                }
                            </h3>
                        </RadzenColumn>
                        <RadzenColumn>
                            <h3> Total: @sim.AttackNumber</h3>
                        </RadzenColumn>
                    </RadzenRow>
                    <RadzenRow>
                        @foreach (var die in sim.AttackDice)
                        {
                            <div class="col-1">

                                <DieDisplay die="@die"></DieDisplay>
                            </div>
                        }
                    </RadzenRow>
                </ChildContent>
                <SummaryTemplate>
                    <RadzenCard class="rz-mt-4">
                        <RadzenRow>
                            <RadzenColumn Size="6">
                                <h3>
                                    Rolling: @attacker.VariableAttackDiceNumber
                                    d @attacker.VariableAttackDiceSides
                                    + @attacker.VariableAttackDiceConstant
                                    @if (sim.BlastBonus > 0)
                                    {
                                        <span> + @sim.BlastBonus</span>
                                    }
                                </h3>
                            </RadzenColumn>
                            <RadzenColumn>
                                <h3> Total: @sim.AttackNumber</h3>
                            </RadzenColumn>
                        </RadzenRow>
                    </RadzenCard>
                </SummaryTemplate>
            </RadzenPanel>
        }
        <RadzenPanel AllowCollapse="true" class="rz-my-10 rz-mx-auto">
            <HeaderTemplate>
                <RadzenText TextStyle="TextStyle.H6" class="rz-display-flex rz-align-items-center rz-m-0">
                    <RadzenIcon Icon="account_box" class="rz-me-1" /><b>To Hit results</b>
                </RadzenText>
            </HeaderTemplate>
            <ChildContent>
                <div class="container">
                    <div class="row">
                        <div class="col-6">
                            <h3>Target: @attacker.Skill</h3>
                        </div>
                        <div class="col-6">
                            <h3>Rolling: @sim.AttackNumber</h3>
                        </div>
                    </div>
                    <div class="row">
                        @foreach (var die in sim.ToHitDice)
                        {
                            <div class="col-1">

                                <DieDisplay die="@die" CriticalMatters="@(attacker.Sustained || attacker.Lethal)"></DieDisplay>
                            </div>
                        }
                    </div>
                </div>
            </ChildContent>
            <SummaryTemplate>
                <RadzenCard Variant="Variant.Outlined" class="rz-mt-4">
                    <div class="row">
                        <div class="col-6">
                            <h3>Target: @attacker.Skill</h3>
                        </div>
                        <div class="col-6">
                            <h3>Rolling: @sim.AttackNumber</h3>
                        </div>
                    </div>
                </RadzenCard>
            </SummaryTemplate>
        </RadzenPanel>
        <RadzenPanel AllowCollapse="true" class="rz-my-10 rz-mx-auto">
            <HeaderTemplate>
                <RadzenText TextStyle="TextStyle.H6" class="rz-display-flex rz-align-items-center rz-m-0">
                    <RadzenIcon Icon="account_box" class="rz-me-1" /><b>To Wound Roll</b>
                </RadzenText>
            </HeaderTemplate>
            <ChildContent>
                <div class="container">
                    <div class="row">
                        <div class="col-6">
                            <h3>Target: @sim.ModdedWoundTarget</h3>
                        </div>
                        <div class="col-6">
                            <h3>
                                Rolling:
                                @sim.ToHitDice.Where(d => d.Success).Count()
                                @{
                                    var sustainedDice = sim.ToHitDice.Where(d => d.Critical).Count() > 0;
                                }
                                @if (attacker.Sustained && sustainedDice)
                                {
                                    <span> + @(@sim.ToHitDice.Where(d => d.Critical).Count() * @sim.AttackProfile.SustainAmount) (sustained)</span>
                                }
                            </h3>
                        </div>
                    </div>
                    <div class="row">
                        @foreach (var die in sim.StrengthDice)
                        {
                            <div class="col-1">

                                <DieDisplay die="@die" CriticalMatters="@attacker.Devastating"></DieDisplay>
                            </div>
                        }
                    </div>
                </div>
            </ChildContent>
            <SummaryTemplate>
                <RadzenCard Variant="Variant.Outlined" class="rz-mt-4">
                    <div class="row">
                        <div class="col-6">
                            <h3>Target: @sim.ModdedWoundTarget</h3>
                        </div>
                        <div class="col-6">
                            <h3>
                                Rolling:
                                @sim.ToHitDice.Where(d => d.Success).Count()
                                @{
                                    var sustainedDice = sim.ToHitDice.Where(d => d.Critical).Count() > 0;
                                }
                                @if (attacker.Sustained && sustainedDice)
                                {
                                    <span> + @(@sim.ToHitDice.Where(d => d.Critical).Count() * @sim.AttackProfile.SustainAmount) (sustained)</span>
                                }
                            </h3>
                        </div>
                    </div>
                </RadzenCard>
            </SummaryTemplate>
        </RadzenPanel>
        <RadzenPanel AllowCollapse="true" class="rz-my-10 rz-mx-auto">
            <HeaderTemplate>
                <RadzenText TextStyle="TextStyle.H6" class="rz-display-flex rz-align-items-center rz-m-0">
                    <RadzenIcon Icon="account_box" class="rz-me-1" /><b>Armor Roll</b>
                </RadzenText>
            </HeaderTemplate>
            <ChildContent>
                <div class="container">
                    <div class="col-6">
                        <h3>Target: @fightSimulationService.DetermineArmorSave(sim)</h3>
                        @if (sim.CoverIgnored)
                        {
                            <h4>Cover did not matter</h4>
                        }
                    </div>
                    <div class="col-6">
                        <h3>Rolling: @sim.StrengthDice.Where(d => d.Success).Count()</h3>
                    </div>
                    <div class="row">
                        @foreach (var die in sim.ArmorDice)
                        {
                            <div class="col-1">

                                <DieDisplay die="@die"></DieDisplay>
                            </div>
                        }
                    </div>
                </div>
            </ChildContent>
            <SummaryTemplate>
                <RadzenCard Variant="Variant.Outlined" class="rz-mt-4">
                    <div class="col-6">
                        <h3>Target: @fightSimulationService.DetermineArmorSave(sim)</h3>
                        @if (sim.CoverIgnored)
                        {
                            <h4>Cover did not matter</h4>
                        }
                    </div>
                    <div class="col-6">
                        <h3>Rolling: @sim.StrengthDice.Where(d => d.Success).Count()</h3>
                    </div>
                </RadzenCard>
            </SummaryTemplate>
        </RadzenPanel>


        @* <h2>Wound Rolls</h2> *@

        @if (sim.AttackProfile.IsVariableDamage)
        {

            <RadzenPanel AllowCollapse="true" class="rz-my-10 rz-mx-auto">
                <HeaderTemplate>
                    <RadzenText TextStyle="TextStyle.H6" class="rz-display-flex rz-align-items-center rz-m-0">
                        <RadzenIcon Icon="account_box" class="rz-me-1" /><b>Damage Roll</b>
                    </RadzenText>
                </HeaderTemplate>
                <ChildContent>
                    <div class="container">
                        <div class="col-6">
                            <h3>
                                Rolling: @attacker.VariableDamageDiceNumber
                                d @attacker.VariableDamageDiceSides
                                + @attacker.VariableAttackDiceConstant
                                @if (sim.AttackProfile.Melta)
                                {
                                    <span>

                                        + @attacker.MeltaDamage (Melta)
                                    </span>
                                }
                            </h3>
                        </div>
                        <div class="col-6">
                            <h3> Total: @sim.DamageNumber</h3>
                        </div>
                        <div class="row">
                            @foreach (var die in sim.WoundDice)
                            {
                                <div class="col-1">

                                    <DieDisplay die="@die"></DieDisplay>
                                </div>
                            }
                        </div>
                    </div>
                </ChildContent>
                <SummaryTemplate>
                    <RadzenCard Variant="Variant.Outlined" class="rz-mt-4">
                        <div class="col-6">
                            <h3>
                                Rolling: @attacker.VariableDamageDiceNumber
                                d @attacker.VariableDamageDiceSides
                                + @attacker.VariableAttackDiceConstant
                                @if (sim.AttackProfile.Melta)
                                {
                                    <span>

                                        + @attacker.MeltaDamage (Melta)
                                    </span>
                                }
                            </h3>
                        </div>
                        <div class="col-6">
                            <h3> Total: @sim.DamageNumber</h3>
                        </div>
                    </RadzenCard>
                </SummaryTemplate>
            </RadzenPanel>
        }
        @if (defender.FeelNoPain)
        {
            <RadzenPanel AllowCollapse="true" class="rz-my-10 rz-mx-auto">
                <HeaderTemplate>
                    <RadzenText TextStyle="TextStyle.H6" class="rz-display-flex rz-align-items-center rz-m-0">
                        <RadzenIcon Icon="account_box" class="rz-me-1" /><b>Feel No Pain Roll</b>
                    </RadzenText>
                </HeaderTemplate>
                <ChildContent>

                    <div class="container">
                        <div class="col-6">
                            <h3>Target: @defender.FeelNoPainTarget</h3>
                        </div>
                        <div class="col-6">
                            <h3>Rolling: @(sim.ArmorDice.Where(d => !d.Success).Count() * attacker.Damage)</h3>
                        </div>
                        <div class="row">
                            @foreach (var die in sim.FeelNoPainDice)
                            {
                                <div class="col-1">
                                    <DieDisplay die="@die"></DieDisplay>
                                </div>
                            }
                        </div>
                    </div>
                </ChildContent>
                <SummaryTemplate>
                    <RadzenCard class="rz-mt-4">
                        <div class="col-6">
                            <h3>Target: @defender.FeelNoPainTarget</h3>
                        </div>
                        <div class="col-6">
                            <h3>Rolling: @(sim.ArmorDice.Where(d => !d.Success).Count() * attacker.Damage)</h3>
                        </div>
                    </RadzenCard>
                </SummaryTemplate>
            </RadzenPanel>

        }
    </RadzenCard>
    <RadzenCard>

        <h1>Winner:</h1>
        <p>@sim.WinnerMessage</p>
    </RadzenCard>
    <RadzenCard>
        <ResultsTable sim=@sim />
    </RadzenCard>
    <RadzenButton Click=@(() => FightUnits()) Text="Fight Again" ButtonStyle="ButtonStyle.Base" />
}
else if (!FightComplete && !simulating)
{
    <h1>LOADING</h1>
}


@code {
    private FightSimulation sim { get; set; } = new FightSimulation();
    private UnitProfile defender { get; set; }
    private bool FightComplete { get; set; } = false;
    private bool simulating { get; set; } = true;
    private AttackProfile attacker { get; set; }
    private FightSimulationService fightSimulationService = new FightSimulationService();
    protected override Task OnInitializedAsync()
    {
        defender = new UnitProfile()
        {
            InvulnerableSave = 0,
            MinimumSave = 3,
            Toughness = 4,
            Wounds = 2,
            ModelCount = 10,
            Name = "intercessor"
        };
        attacker = new AttackProfile()
        {
            ArmorPenetration = 1,
            Attacks = 20,
            Damage = 1,
            Skill = 3,
            Strength = 4,
            VariableAttackDiceConstant = 1,
            VariableAttackDiceNumber = 2,
            VariableDamageDiceConstant = 1,
            VariableDamageDiceNumber = 1
        };
        return base.OnInitializedAsync();
    }
    private async Task FightUnits()
    {
        await ResetDice();
        simulating = true;
        if (sim.AttackProfile.IsVariableAttacks)
        {
            fightSimulationService.RollAttackDice(sim);
        }
        fightSimulationService.RollToHit(sim);
        fightSimulationService.RollStrengthStep(sim);
        fightSimulationService.RollArmorSaves(sim);

        if (sim.AttackProfile.IsVariableDamage)
        {
            fightSimulationService.RollDamageDice(sim);
        }
        if (defender.FeelNoPain)
        {
            fightSimulationService.RollFeelNoPain(sim);
        }
        sim.WinnerMessage = fightSimulationService.GenerateWinnerMessage(sim);
        FightComplete = true;
        simulating = false;
    }
    private async Task ResetDice()
    {
        FightComplete = false;
        sim = new FightSimulation()
        {
            AttackProfile = attacker,
            Defender = defender
        };
        simulating = false;
        StateHasChanged();
        await Task.Yield();
    }
}
