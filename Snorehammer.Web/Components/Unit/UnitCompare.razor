@page "/unitcompare"
@using Snorehammer.Web.Components.Simulation.DiceRoller
@using Snorehammer.Web.FrontendModels
@using Snorehammer.Web.Services
@rendermode InteractiveServer
<h3>UnitCompare</h3>
<div class="container">
    <div class="col-6">

        <h4>Attacker</h4>
        <AttackInput @bind-attack="attacker"></AttackInput>
        <h4>Defender</h4>
        <UnitInput @bind-Unit="defender" Attacker=false></UnitInput>
        <button @onclick="FightUnits">Fight</button><button @onclick="ResetDice">Reset</button>
        @if (FightComplete)
        {

            <h4>results</h4>
            <h2>Attack Results</h2>
            <div class="container">
                <div class="row">
                    <div class="col-6">
                        <h3>Target: @attacker.Skill</h3>
                    </div>
                    <div class="col-6">
                        <h3>Rolling: @attacker.Attacks</h3>
                    </div>
                </div>
                <div class="row">
                    @foreach (var die in AttackDice)
                    {
                        <div class="col-1">

                            <DieDisplay die="@die"></DieDisplay>
                        </div>
                    }
                </div>
            </div>
            <h2>Strength vs toughness</h2>
            <div class="container">
                <div class="row">
                    <div class="col-6">
                        <h3>Target: @fightSimulationService.DetermineWoundTarget(defender.Toughness,attacker.Strength)</h3>
                    </div>
                    <div class="col-6">
                        <h3>Rolling: @AttackDice.Where(d=>d.Success).Count()</h3>
                    </div>
                </div>
                <div class="row">
                    @foreach (var die in StrengthDice)
                    {
                        <div class="col-1">

                            <DieDisplay die="@die"></DieDisplay>
                        </div>
                    }
                </div>
            </div>
            <h2>Armor rolls</h2>
            <div class="container">
                <div class="col-6">
                    <h3>Target: @fightSimulationService.DetermineArmorSave(defender, attacker)</h3>
                </div>
                <div class="col-6">
                    <h3>Rolling: @StrengthDice.Where(d => d.Success).Count()</h3>
                </div>
                <div class="row">
                    @foreach (var die in ArmorDice)
                    {
                        <div class="col-1">

                            <DieDisplay die="@die"></DieDisplay>
                        </div>
                    }
                </div>
            </div>
            @* <h2>Wound Rolls</h2>
            <h2>Feel No Pain Rolls</h2> *@
            <h3>Winner:</h3>
        }
    </div>
    <div class="col-6">

    </div>
</div>
<button @onclick="FightUnits">Go again?</button>
@code {
    private UnitProfile defender { get; set; }
    private bool FightComplete { get; set; } = false;
    private List<Dice> AttackDice { get; set; }
    private List<Dice> StrengthDice { get; set; }
    private List<Dice> ArmorDice { get; set; }
    private List<Dice> WoundDice { get; set; }
    private AttackProfile attacker { get; set; }
    private FightSimulationService fightSimulationService = new FightSimulationService();
    protected override Task OnInitializedAsync()
    {
        defender = new UnitProfile()
            {
                InvulnerableSave = 0,
                MinimumSave = 3,
                Toughness = 4,
                Wounds = 2,
                Name = "intercessor"
            };
        attacker = new AttackProfile()
            {
                ArmorPenetration = -1,
                Attacks = 2,
                Damage = 1,
                Skill = 3,
                Strength = 4

            };
        return base.OnInitializedAsync();
    }
    private void FightUnits()
    {
        FightComplete = false;
        ResetDice();
        fightSimulationService = new FightSimulationService();
        AttackDice = fightSimulationService.SimulateToHitRoll(attacker);
        StrengthDice = fightSimulationService.RollStrengthStep(defender, attacker, AttackDice);
        ArmorDice = fightSimulationService.RollArmorSaves(defender, attacker, StrengthDice);
        FightComplete = true;
    }
    private void ResetDice()
    {
        AttackDice = new List<Dice>();
        StrengthDice = new List<Dice>();
        ArmorDice = new List<Dice>();
    }
}
